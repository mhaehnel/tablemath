\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{tablemath}[2017/12/08]
\RequirePackage{pgfplotstable}
\RequirePackage{pgfkeys}
\RequirePackage{pgfmath}
\RequirePackage{trace}

\ProcessOptions\relax
\newif\iftablemath@printresult
\newif\iftablemath@usefpu

\pgfkeys{
    /tablemath/.is family,
    /tablemath,
        quantile/.is family,
        fun/.is family,
        functions/.is family,
        operations/.is family,
        showable/.is family,
        storeable/.is family,
        column operation/.is family,
   /tablemath/column operation,
        column/.estore in = \tablemath@column,
   /tablemath/storeable,
        result in/.store in = \tablemath@result,
        result in/.add code = {}{\pgfkeysalso{/tablemath/showable/show=false}},
        round result to/.store in = \tablemath@round,
    /tablemath/showable,
        show/.is if = tablemath@printresult,
        show/.default = true,
        show/.initial = true,
        show,
    /tablemath/quantile,
        q/.estore in = \tablemath@quantile@q,
        k/.estore in = \tablemath@quantile@k,
        upper quartile/.style={q=4,k=3},
        lower quartile/.style={q=4,k=1},
        median/.style={q=4,k=2},
        method/.estore in = \tablemath@quantile@method,
        method=7,
        .search also = {
          /tablemath,
          /tablemath/storeable,
          /tablemath/showable,
          /tablemath/column operation,
        },
    /tablemath/operations,
        initial/.estore in = \acc,
        use fpu/.is if = tablemath@usefpu,
        operation/.store in = \tablemath@fun@code,
        finally/.store in = \tablemath@fun@postcode,
        finally=\acc,
        initial=0,
        sum/.style = {operation={\acc + \cell}},
        product/.style = {initial=1,operation={\acc * \cell}},
        average/.style = {sum,finally={\acc/\rows}},
        mape/.style = {operation={\acc + abs(\cell},finally={\acc*100/\rows}},
        gmrae/.style = {operation={\acc + ln(abs(\cell))},finally={exp(\acc/\rows)}},
        gmrae-percent/.style = {gmrae,finally={100*exp(\acc/\rows)}},
    /tablemath/functions,
        .search also = {
          /tablemath,
          /tablemath/storeable,
          /tablemath/showable,
          /tablemath/column operation,
          /tablemath/operations,
        },
}

\def\tablemath@cmdname#1{\expandafter\@gobble\string#1}%

\newcommand{\tablemath@processResult}{%Target
    \ifdefined\tablemath@round
        \iftablemath@printresult\pgfmathprintnumber[precision=\tablemath@round]\tablemathretval\fi
    \else
        \iftablemath@printresult\pgfmathprintnumber\tablemathretval\fi
    \fi
    \ifdefined\tablemath@result
        \ifdefined\tablemath@round
            \pgfmathprintnumberto[precision=\tablemath@round]\tablemathretval{\tablemathretval}
        \fi
        \expandafter\global\expandafter\let\tablemath@result\tablemathretval
    \fi
}

\newcommand\tablemath@tmp\relax
\newcommand{\tablemath@parseSorted}[1]{
        \tablemath@sort{\tablemath@column}{#1}
        %
        \renewcommand\tablemath@tmp[1]{%
            %Find min in first fow
            \pgfplotstablegetelem{0}{\tablemath@column}\of{##1}%
            \expandafter\pgfmathsetmacro\csname tablemath@results@\tablemath@cmdname#1@Min@\tablemath@column\endcsname{\pgfplotsretval}%
            %Find max by looking in last row
            \pgfplotstablegetrowsof{##1}%
            \pgfmathtruncatemacro{\tmp}{\pgfmathresult-1}%
            \pgfplotstablegetelem{\tmp}{\tablemath@column}\of{##1}%
            \expandafter\pgfmathsetmacro\csname tablemath@results@\tablemath@cmdname#1@Max@\tablemath@column\endcsname{\pgfplotsretval}%
        }
        \expandafter\tablemath@tmp\expandafter{\tablemath@tmptable}
}

%Internal: Sort table #3 using col #2 and store in #1
\newcommand\tablemath@sortAux[3]{%
    \pgfplotstablesort[sort cmp=float <,sort key=#2]{#1}{#3}
}
\newcommand\tablemath@alias[1]{\def\tablemath@tmptable{#1}}

%Arguments: Column, Original Table name
\newcommand\tablemath@sort[2]{
    \ifcsname tablemath@results@sorted@\tablemath@cmdname#2@#1\endcsname
    \else
        \expandafter\tablemath@sortAux\expandafter{\csname tablemath@results@sorted@\tablemath@cmdname#2@#1\endcsname}{#1}{#2}
    \fi
    \expandafter\tablemath@alias\expandafter{\csname tablemath@results@sorted@\tablemath@cmdname#2@#1\endcsname}
}


\newcommand\tablemathQuantile[2][]{%
    \begingroup
    \pgfkeys{/tablemath/quantile, #1}
    \ifnum\tablemath@quantile@q < 2\pgferror{Quantiles smaller than the 2-Quantile don't make sense}\fi
    \ifnum\tablemath@quantile@k < \tablemath@quantile@q\else\pgferror{Quantiles must have k < q [k=\tablemath@quantile@k, q=\tablemath@quantile@k]}\fi
    \ifnum\tablemath@quantile@k < 1\pgferror{The k-th q-Quantile must have k >= 1 [k=\tablemath@quantile@k]}\fi
    %Cache sorting ...
    \tablemath@sort{\tablemath@column}{#2}
    %Get quantile
    \expandafter\pgfplotstablegetrowsof\expandafter{\tablemath@tmptable}
    \pgfmathsetmacro{\tablemath@rows}{\pgfplotsretval}
    \providecommand\y[3]{%
        \pgfmathparse{int((##2)-1)}
        \pgfplotstablegetelem{\pgfmathresult}{\tablemath@column}\of{##1}
        \pgfmathsetmacro{##3}{\pgfplotsretval}
    }
    \pgfmathsetmacro{\tablemath@quantile@p}{\tablemath@quantile@k/\tablemath@quantile@q}
    %Select method, remember: p can not be 1 or 0 due to the above constraints
    \ifcase\tablemath@quantile@method%0
        \pgferror{Quantile method 0 invalid. Valid methods are 1-9}
    \or%1
        \pgfmathsetmacro{\h}{\tablemath@rows*\tablemath@quantile@p+0.5}
        \expandafter\y\tablemath@tmptable{ceil(\h-0.5)}{\tablemathretval}
    \or%2
        \pgfmathsetmacro{\h}{\tablemath@rows*\tablemath@quantile@p+0.5}
        \expandafter\y\tablemath@tmptable{ceil(\h-0.5)}{\xh}
        \expandafter\y\tablemath@tmptable{ceil(\h+0.5)}{\xhn}
        \pgfmathsetmacro{\tablemathretval}{(\xh+\xhn)/2}
    \or%3
        \pgfmathsetmacro{\h}{\tablemath@rows*\tablemath@quantile@p}
        \pgfmathparse{int(round(\h))}
        \ifnum\pgfmathresult=0
            \expandafter\y\tablemath@tmptable{1}{\tablemathretval}
        \else
            \expandafter\y\tablemath@tmptable{round(\h)}{\tablemathretval}
        \fi
    \or%4
        \pgfmathsetmacro{\h}{\tablemath@rows*\tablemath@quantile@p}
        \pgfmathparse{int(floor(\h))}
        \ifnum\pgfmathresult=0
            \expandafter\y\tablemath@tmptable{1}{\tablemathretval}
        \else
            \expandafter\y\tablemath@tmptable{floor(\h)}{\xh}
            \expandafter\y\tablemath@tmptable{floor(\h+1)}{\xhn}
            \pgfmathsetmacro{\tablemathretval}{\xh+(\h-floor(\h))*(\xhn-\xh)}
        \fi
    \or%5
        \pgfmathsetmacro{\h}{\tablemath@rows*\tablemath@quantile@p+0.5}
        \pgfmathparse{int(floor(\h))}
        \ifnum\pgfmathresult=0
            \expandafter\y\tablemath@tmptable{1}{\tablemathretval}
        \else
            \expandafter\y\tablemath@tmptable{floor(\h)}{\xh}
            \expandafter\y\tablemath@tmptable{floor(\h+1)}{\xhn}
            \pgfmathsetmacro{\tablemathretval}{\xh+(\h-floor(\h))*(\xhn-\xh)}
        \fi
    \or%6
        \pgfmathsetmacro{\h}{(\tablemath@rows+1)*\tablemath@quantile@p}
        \pgfmathparse{int(floor(\h))}
        \ifnum\pgfmathresult=0
            \expandafter\y\tablemath@tmptable{1}{\tablemathretval}
        \else
            \expandafter\y\tablemath@tmptable{floor(\h)}{\xh}
            \expandafter\y\tablemath@tmptable{floor(\h+1)}{\xhn}
            \pgfmathsetmacro{\tablemathretval}{\xh+(\h-floor(\h))*(\xhn-\xh)}
        \fi
    \or%7
        \pgfmathsetmacro{\h}{(\tablemath@rows-1)*\tablemath@quantile@p+1}
        \expandafter\y\tablemath@tmptable{floor(\h)}{\xh}
        \expandafter\y\tablemath@tmptable{floor(\h+1)}{\xhn}
        \pgfmathsetmacro{\tablemathretval}{\xh+(\h-floor(\h))*(\xhn-\xh)}
    \or%8
        \pgfmathsetmacro{\h}{(\tablemath@rows+1/3)*\tablemath@quantile@p+1/3}
        \expandafter\y\tablemath@tmptable{floor(\h)}{\xh}
        \expandafter\y\tablemath@tmptable{floor(\h+1)}{\xhn}
        \pgfmathsetmacro{\tablemathretval}{\xh+(\h-floor(\h))*(\xhn-\xh)}
    \or%9
        \pgfmathsetmacro{\h}{(\tablemath@rows+1/4)*\tablemath@quantile@p+3/8}
        \expandafter\y\tablemath@tmptable{floor(\h)}{\xh}
        \expandafter\y\tablemath@tmptable{floor(\h+1)}{\xhn}
        \pgfmathsetmacro{\tablemathretval}{\xh+(\h-floor(\h))*(\xhn-\xh)}
    \else%
        \pgferror{Quantile method \tablemath@quantile@method invalid. Valid methods are 1-9}
    \fi
    \tablemath@processResult
    \endgroup
}

%Generic version,
%Performs operation that is currenly defined on all columns in #1 and returns a result
%table in #2 with a new row named after the key. Transpose per option in #3
%Needs to be called after pgfkeys have already been set!
%PRECONDITION: this needs to be already grouped!
\def\tablemath@makeRow#1#2#3{
  \pgfplotstabletranspose[colnames from/.expand once=\tablemath@column,input colnames to/.expand once={\tablemath@column}]{\tablemath@intermediatetable}{#1}%
  \pgfplotstablecreatecol[%
    create col/assign/.code={%
        \iftablemath@usefpu\pgfkeys{/pgf/fpu,/pgf/fpu/output format=fixed}\fi
        \pgfmathtruncatemacro\maxcolindex{\pgfplotstablecols-1}%
        \pgfplotstablegetrowsof{#1}%
        \pgfmathsetmacro{\rows}{\pgfplotsretval}%
        \pgfmathsetmacro\rowno{0}%
        \pgfplotsforeachungrouped \col in {1,...,\maxcolindex}{%
          \pgfmathsetmacro{\cell}{\thisrowno{\col}}
          \pgfmathsetmacro{\acc}{\tablemath@fun@code}%
          \pgfmathsetmacro\rowno{\rowno+1}%
        }%
        \pgfmathsetmacro{\tablemathretval}{\tablemath@fun@postcode}%
        \pgfkeyslet{/pgfplots/table/create col/next content}\tablemathretval
    }%
  ]{\tablemath@newrow}\tablemath@intermediatetable
  \pgfplotstabletranspose[%
    %columns/.expanded={\tablemath@column,\tablemath@newrow},%
    #3,
    colnames from/.expand once={\tablemath@column},%
    input colnames to/.expand once={\tablemath@column}%
  ]{#2}{\tablemath@intermediatetable}%
}

%Performs operation defined in #1 on all columns in #2 and returns a result
%table in #3 with a new row named after the key 
%TODO: cope with the case where columns are not named
\def\tablemathCreateRow[#1]#2#3{
  \begingroup
  \pgfkeys{/tablemath/operations, title column/.estore in=\tablemath@column, row title/.estore in=\tablemath@newrow, row title=aggregate,#1}
  \tablemath@makeRow{#2}{#3}{columns/.expanded={\tablemath@column,\tablemath@newrow}}%
  \pgfplotstable@copy@to@globalbuffers#3{newlycreatedtable}%
  \endgroup
  \pgfplotstable@copy@globalbuffers@to#3%
}

%Same as tablemathCreateRow but append it to the table.
\def\tablemathAddRow[#1]#2{
  \begingroup
  \pgfkeys{/tablemath/operations, title column/.estore in=\tablemath@column, row title/.estore in=\tablemath@newrow, row title=aggregate,#1}
  \tablemath@makeRow{#2}{#2}{}%
  \pgfplotstable@copy@to@globalbuffers#2{newlycreatedtable}%
  \endgroup
  \pgfplotstable@copy@globalbuffers@to#2%
}

%Usable macros:
% \rows
% \cell
% \acc
\newcommand{\tablemathFunUngrouped}[2][]{%
    \pgfkeys{/tablemath/functions, #1}%
    \iftablemath@usefpu\pgfkeys{/pgf/fpu,/pgf/fpu/output format=fixed}\fi
    \pgfplotstablegetrowsof{#2}%
    \pgfmathsetmacro{\rows}{\pgfplotsretval}%
    \pgfmathsetmacro\rowno{0}%
    \pgfplotstableforeachcolumnelement{\tablemath@column}\of#2\as\cell{%
        \pgfmathsetmacro{\acc}{\tablemath@fun@code}%
        \pgfmathsetmacro\rowno{\rowno + 1}%
    }%
    \pgfmathsetmacro{\tablemathretval}{\tablemath@fun@postcode}%
    \tablemath@processResult
}

\newcommand{\tablemathFun}[2][]{%
	\begingroup
	\tablemathFunUngrouped[#1]{#2}%
	\endgroup
}

\newcommand{\tablemath@newfun}[1]{%
    \expandafter\newcommand\csname tablemath#1\endcsname[2][]{%
        \begingroup
        \pgfkeys{/tablemath/functions, ##1}
        \ifcsname tablemath@results@\tablemath@cmdname##2@#1@\tablemath@column\endcsname
        \else%
            \tablemath@parseSorted{##2}
        \fi
        \pgfmathsetmacro{\tablemathretval}{\csname tablemath@results@\tablemath@cmdname##2@#1@\tablemath@column\endcsname}
        \tablemath@processResult
        \endgroup
    }
}

%Args: Description Col, Table, TargetName
\def\tablemathCreateSumRow#1#2#3{%
	\pgfplotstabletranspose[colnames from={#1},input colnames to={#1}]{\intermediatetable}{#2}
	\pgfplotstablecreatecol[
    create col/assign/.code={%
        \def\colsum{0}
        \pgfmathtruncatemacro\maxcolindex{\pgfplotstablecols-1}
        \pgfplotsforeachungrouped \col in {1,...,\maxcolindex}{
            \pgfmathsetmacro\colsum{\colsum+\thisrowno{\col}}
        }
        \pgfkeyslet{/pgfplots/table/create col/next content}\colsum
    }
	]{Sum}\intermediatetable
	\pgfplotstabletranspose[columns={#1,Sum},colnames from={#1}, input colnames to={#1}]{#3}{\intermediatetable}
}

\newcommand\tablemathMedian[2][]{\tablemathQuantile[#1,median]{#2}}
\@for\i:=Min,Max\do{%
    \expandafter\tablemath@newfun\expandafter{\i}
}

\endinput
